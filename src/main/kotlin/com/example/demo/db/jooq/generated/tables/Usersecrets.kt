/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.jooq.generated.tables


import com.example.demo.db.jooq.generated.DefaultSchema
import com.example.demo.db.jooq.generated.keys.PK_USERSECRETS
import com.example.demo.db.jooq.generated.tables.records.UsersecretsRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Usersecrets(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersecretsRecord>?,
    aliased: Table<UsersecretsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersecretsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>userSecrets</code>
         */
        val USERSECRETS = Usersecrets()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersecretsRecord> = UsersecretsRecord::class.java

    /**
     * The column <code>userSecrets.userId</code>.
     */
    val USERID: TableField<UsersecretsRecord, String?> = createField(DSL.name("userId"), SQLDataType.VARCHAR(36).nullable(false), this, "")

    /**
     * The column <code>userSecrets.secretType</code>.
     */
    val SECRETTYPE: TableField<UsersecretsRecord, String?> = createField(DSL.name("secretType"), SQLDataType.VARCHAR(13).nullable(false), this, "")

    /**
     * The column <code>userSecrets.value</code>.
     */
    val VALUE: TableField<UsersecretsRecord, String?> = createField(DSL.name("value"), SQLDataType.VARCHAR(7), this, "")

    private constructor(alias: Name, aliased: Table<UsersecretsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersecretsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>userSecrets</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>userSecrets</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>userSecrets</code> table reference
     */
    constructor(): this(DSL.name("userSecrets"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersecretsRecord>): this(Internal.createPathAlias(child, key), child, key, USERSECRETS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<UsersecretsRecord> = PK_USERSECRETS
    override fun getKeys(): List<UniqueKey<UsersecretsRecord>> = listOf(PK_USERSECRETS)
    override fun `as`(alias: String): Usersecrets = Usersecrets(DSL.name(alias), this)
    override fun `as`(alias: Name): Usersecrets = Usersecrets(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Usersecrets = Usersecrets(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Usersecrets = Usersecrets(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, String?> = super.fieldsRow() as Row3<String?, String?, String?>
}
