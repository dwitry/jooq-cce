/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.jooq.generated.tables.records


import com.example.demo.db.jooq.generated.tables.Users

import org.jooq.Field
import org.jooq.JSON
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersRecord() : UpdatableRecordImpl<UsersRecord>(Users.USERS), Record5<String?, String?, String?, String?, JSON?> {

    var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var description: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var secrettype: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var roles: JSON?
        set(value) = set(4, value)
        get() = get(4) as JSON?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<String?, String?, String?, String?, JSON?> = super.fieldsRow() as Row5<String?, String?, String?, String?, JSON?>
    override fun valuesRow(): Row5<String?, String?, String?, String?, JSON?> = super.valuesRow() as Row5<String?, String?, String?, String?, JSON?>
    override fun field1(): Field<String?> = Users.USERS.ID
    override fun field2(): Field<String?> = Users.USERS.NAME
    override fun field3(): Field<String?> = Users.USERS.DESCRIPTION
    override fun field4(): Field<String?> = Users.USERS.SECRETTYPE
    override fun field5(): Field<JSON?> = Users.USERS.ROLES
    override fun component1(): String? = id
    override fun component2(): String? = name
    override fun component3(): String? = description
    override fun component4(): String? = secrettype
    override fun component5(): JSON? = roles
    override fun value1(): String? = id
    override fun value2(): String? = name
    override fun value3(): String? = description
    override fun value4(): String? = secrettype
    override fun value5(): JSON? = roles

    override fun value1(value: String?): UsersRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UsersRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): UsersRecord {
        this.description = value
        return this
    }

    override fun value4(value: String?): UsersRecord {
        this.secrettype = value
        return this
    }

    override fun value5(value: JSON?): UsersRecord {
        this.roles = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: JSON?): UsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: String? = null, name: String? = null, description: String? = null, secrettype: String? = null, roles: JSON? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        this.secrettype = secrettype
        this.roles = roles
    }
}
